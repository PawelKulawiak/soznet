[{"name":"app.R","content":"\r\n\r\nlibrary(shiny)\r\nlibrary(igraph)\r\nlibrary(readxl)\r\nlibrary(ggplot2)\r\nlibrary(magrittr)\r\nlibrary(ggraph)\r\n\r\n### ui\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"SozNet: Soziale Netzwerkanalyse & Netzwerkvisualisierung\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      fileInput(\"file1\", \"Socio-Matrix hochladen\\n(Excel-Datei)\",\r\n                buttonLabel = \"Datei suchen...\",\r\n                placeholder = \"Keine Datei ausgewählt\",\r\n                accept = c(\".xlsx\")),\r\n      helpText(\"Socio-Matrix mit Nominierungen bitte hier hochladen\"),\r\n      uiOutput(\"selectNodeUI\"), # Dynamic UI for selecting a node\r\n      width = 3\r\n    ),\r\n    mainPanel(\r\n      fluidRow(\r\n        column(6,\r\n               hr(),\r\n               plotOutput(\"networkDirect\"),\r\n               hr(),\r\n               plotOutput(\"networkMutual\")),\r\n        column(6,\r\n               hr(),\r\n               plotOutput(\"networkCliqueDirect\"),\r\n               hr(),\r\n               plotOutput(\"networkCliqueMutual\"))),\r\n      hr(),\r\n      fluidRow(tableOutput(\"degree\")),\r\n      width = 9\r\n    )\r\n  )\r\n)\r\n\r\n### server\r\n\r\nserver <- function(input, output) {\r\n  \r\n  graphObj <- reactiveVal()\r\n  \r\n  output$selectNodeUI <- renderUI({\r\n    req(graphObj()) # Ensure graph object is available\r\n    selectInput(\"selectedNode\", \"Schüler:in auswählen (für Darstellung der Clique)\",\r\n                choices = V(graphObj())$name)\r\n  })\r\n  \r\n  observe({\r\n    req(input$file1)\r\n    \r\n    # Read the Excel file\r\n    friendships <- read_excel(input$file1$datapath, col_names = T)\r\n    \r\n    # Create an adjacency matrix\r\n    adjacencyMatrix <-\r\n      friendships |>\r\n      select(-1) |>\r\n      as.matrix()\r\n    \r\n    # Create a graph from the adjacency matrix\r\n    g <- graph_from_adjacency_matrix(adjacencyMatrix, mode = \"directed\", diag = FALSE)\r\n    graphObj(g)\r\n    })\r\n    \r\n  output$networkDirect <- renderPlot({\r\n    req(input$file1)\r\n    \r\n    # Read the Excel file\r\n    friendships <- read_excel(input$file1$datapath, col_names = T)\r\n    \r\n    # Create an adjacency matrix\r\n    adjacencyMatrix <-\r\n      friendships |>\r\n      select(-1) |>\r\n      as.matrix()\r\n    \r\n    # Create a graph from the adjacency matrix\r\n    g <- graph_from_adjacency_matrix(adjacencyMatrix, mode = \"directed\", diag = FALSE)\r\n    \r\n    # Plot the graph\r\n    ggraph(g, layout = \"kk\") +\r\n      geom_edge_link(color=\"gray\", arrow = arrow(type = \"closed\", angle = 10),\r\n                     end_cap = circle(0.3, \"inches\"),\r\n                     start_cap = circle(0.3, \"inches\")) +\r\n      geom_node_point(color = \"black\", size = 10) +\r\n      geom_node_label(aes(label = name), repel = F) +\r\n      ggtitle(\"Alle Nominierungen (gesamte Klasse)\") +\r\n      theme_void()\r\n  })\r\n  \r\n  output$networkMutual <- renderPlot({\r\n    req(input$file1)\r\n    \r\n    # Read the Excel file\r\n    friendships <- read_excel(input$file1$datapath, col_names = T)\r\n    \r\n    # Create an adjacency matrix\r\n    adjacencyMatrix <-\r\n      friendships |>\r\n      select(-1) |>\r\n      as.matrix()\r\n    \r\n    # Create a graph from the adjacency matrix\r\n    g <- graph_from_adjacency_matrix(adjacencyMatrix, mode = \"directed\", diag = FALSE)\r\n    \r\n    # Plot the graph\r\n    ggraph(g |> as.undirected(mode = \"mutual\") |>\r\n             as.directed(mode = \"mutual\"), layout = \"kk\") +\r\n      geom_edge_link(color=\"gray\",\r\n                     arrow = arrow(type = \"closed\", angle = 10),\r\n                     end_cap = circle(0.3, \"inches\"),\r\n                     start_cap = circle(0.3, \"inches\")) +\r\n      geom_node_point(color = \"black\", size = 10) +\r\n      geom_node_label(aes(label = name), repel = F) +\r\n      ggtitle(\"Wechselseitige Nominierungen (gesamte Klasse)\") +\r\n      theme_void()\r\n  })\r\n  \r\n  output$networkCliqueDirect <- renderPlot({\r\n    # Plot the graph\r\n    g <- graphObj()\r\n    req(input$selectedNode)\r\n    \r\n    # Find the selected node and its neighbors\r\n    subGraphNodes <- c(input$selectedNode, neighbors(g, input$selectedNode) |> names())\r\n    subG <- induced_subgraph(g, subGraphNodes)\r\n    \r\n    ggraph(subG, layout = \"kk\") +\r\n      geom_edge_link(color=\"gray\", arrow = arrow(type = \"closed\", angle = 10),\r\n                     end_cap = circle(0.3, \"inches\"),\r\n                     start_cap = circle(0.3, \"inches\")) +\r\n      geom_node_point(color = \"black\", size = 10) +\r\n      geom_node_label(aes(label = name), repel = F) +\r\n      ggtitle(\"Clique der ausgewählten Schüler:in (alle Nominierungen)\") +\r\n      theme_void()\r\n  })\r\n  \r\n  output$networkCliqueMutual <- renderPlot({\r\n    # Plot the graph\r\n    g <- graphObj()\r\n    req(input$selectedNode)\r\n    \r\n    g <-\r\n      g |>\r\n      as.undirected(mode = \"mutual\") |>\r\n      as.directed(mode = \"mutual\")\r\n    \r\n    # Find the selected node and its neighbors\r\n    subGraphNodes <- c(input$selectedNode, neighbors(g, input$selectedNode) |> names())\r\n    subG <- induced_subgraph(g, subGraphNodes)\r\n    \r\n    ggraph(subG, layout = \"kk\") +\r\n      geom_edge_link(color=\"gray\", arrow = arrow(type = \"closed\", angle = 10),\r\n                     end_cap = circle(0.3, \"inches\"),\r\n                     start_cap = circle(0.3, \"inches\")) +\r\n      geom_node_point(color = \"black\", size = 10) +\r\n      geom_node_label(aes(label = name), repel = F) +\r\n      ggtitle(\"Clique der ausgewählten Schüler:in (wechselseitige Nominierungen)\") +\r\n      theme_void()\r\n  })\r\n\r\n  output$degree <- renderTable({\r\n    req(input$file1)\r\n    \r\n    # Read the Excel file\r\n    friendships <- read_excel(input$file1$datapath, col_names = T)\r\n    \r\n    # Create an adjacency matrix\r\n    adjacencyMatrix <-\r\n      friendships |>\r\n      select(-1) |>\r\n      as.matrix()\r\n    \r\n    # Create a graph from the adjacency matrix\r\n    g <- graph_from_adjacency_matrix(adjacencyMatrix, mode = \"directed\", diag = FALSE)\r\n    \r\n    # Table (indegree)\r\n    cbind(\r\n    degree(g, mode = \"in\") |>\r\n      sort(decreasing = T) |>\r\n      as.data.frame() %>%\r\n      rename(\"Erhaltenen Nominierungen\" = names(.)[1]) |>\r\n      rownames_to_column(var = \"Name\"),\r\n    \r\n    degree(g, mode = \"out\") |>\r\n      sort(decreasing = T) |>\r\n      as.data.frame() %>%\r\n      rename(\"Ausgesendete Nominierungen\" = names(.)[1]) |>\r\n      rownames_to_column(var = \"Name\"),\r\n    \r\n    degree(g |> as.undirected(mode = \"mutual\")) |>\r\n      sort(decreasing = T) |>\r\n      as.data.frame() %>%\r\n      rename(\"Wechselseitige Nominierungen\" = names(.)[1]) |>\r\n      rownames_to_column(var = \"Name\")\r\n    )\r\n  }, digits = 0)\r\n  \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
